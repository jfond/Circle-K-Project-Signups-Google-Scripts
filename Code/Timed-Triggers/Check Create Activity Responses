function checkActivityResponses(e) {
  

  
  /*When the project is submitted, we need to do the following things:
    1. a) If the user did NOT enter a signup end date, set it to 24 hours before the event starts. Except, if the project was submitted within 24 hours of the project start date, then set it to 1 hour before the start date.
       b) If the user did enter a signup end date, make sure that it is before, or exactly at the same time as the project start date, and that it is after the signup start date.
             Otherwise, delete the entry and notify the creator.

    2. a) If the user did NOT enter a signup start date, set it to the time and date that the project was submitted.
       b) If the user did enter a signup start date, make sure that it is before the signup end date, and before the project start date.
             Otherwise, delete the entry and notify the creator. 
      
    3. Create a trigger that automatically removes this project from the list of active projects at the time of the project signup end date, and maybe move it to a "archiving" spreadsheet.
    */
  
  //Wait a short period so that the form can update the server and acknowledge that the form was submitted.
  //If we don't wait, sometimes this script is too early and finds no new submission and does nothing
   
  var createActivityForm = FormApp.openById("1-i6iK2T_hD7ND06knw_J3sh7qjYciNzmefuLTc7AvTM");
 
  var formResponsesNumber = SpreadsheetApp.openById("12RLuJRu-uQ0IOGkZYJUC9PrD1Jza2WVVgqKhh94wbOY").getSheets()[0].getRange(2, 1).getValue(); //Yeah its hard coded/magic numbers, blah blah.. GET OVER IT
  Logger.log("Checking Project Creation Responses...");  
  
  //The submission we want is the one that was just submitted (last entry as submitted most recently)
  var formResponses = createActivityForm.getResponses();
  var NUM_RESPONSES_PER_RUN = 1;
  if ((formResponses.length) > formResponsesNumber){
    var maxIndex = Math.min((formResponses.length), formResponsesNumber+ NUM_RESPONSES_PER_RUN);
    SpreadsheetApp.openById("12RLuJRu-uQ0IOGkZYJUC9PrD1Jza2WVVgqKhh94wbOY").getSheets()[0].getRange(2, 1).setValue(maxIndex);
  }
  //Make the signup Time when the responses were first checked.
  var now = new Date();
  Logger.log("Now: " + now.getHours());
  if ((now.getHours() == 4) && (now.getMinutes() >14) && (now.getMinutes() < 17)){
    createActivityForm.deleteAllResponses(); 
    SpreadsheetApp.openById("12RLuJRu-uQ0IOGkZYJUC9PrD1Jza2WVVgqKhh94wbOY").getSheets()[0].getRange(2, 1).setValue(0);
    Logger.log("DELETING ACTIVITY CREATION RESPONSES...");
  }
  
 
  var projectItemResponses;
  for (var ik=formResponsesNumber;ik<maxIndex;ik++){
    projectItemResponses = formResponses[ik].getItemResponses();
    // This method makes sure that the input project start date is before the project end date.
    // If there are shifts, it also makes sure that the shift times are valid and the signup dates 
    // are valid.
    var Info = EntryValidation(projectItemResponses);
    var Problems = Info[0];
    
    var signupStartTime = Info[1];
    var signupEndTime = Info[2];
    
    //If there are no problems with the project dates, now we check to make sure that 
    //there are no problems with the signup dates. 
    //We keep a variable which lists the shifts that have problems. 
    //If there are problems, then email the user of all of the problems.
    //If there are not problems, then continue with the script.
    
    if (Problems.projectNameAlreadyUsed ||
        Problems.projectStartInThePast ||
        Problems.projectBoundTimesInvalid ||
        Problems.shift1BoundTimesInvalid ||
        Problems.shift2BoundTimesInvalid ||
        Problems.shift3BoundTimesInvalid ||
        Problems.shift4BoundTimesInvalid ||
        Problems.alreadyExistingProject ||
        Problems.signupStartTooLate ||
        Problems.signupEndAfterProjectStart ||
        Problems.signupStartEndBoundsInvalid) {
      SendErrorEmail(projectItemResponses, Problems);
      
    }
    
    else {
      Logger.log("PUSHING COMPLETED");
      addResponsetoSpreadsheet(projectItemResponses, signupStartTime, signupEndTime); //Put this response in the "Current Projects" Spreadsheet which holds information on all current projects
      var projectRosterSheet = createProjectResponseSheet(projectItemResponses); //Create a new, temporary spreadsheet which will hold the roster list. One spreadsheet per current project.
      SendProjectApprovedEmail(projectItemResponses, projectRosterSheet); //Send email
      
      //Check if we can add the project now or if we need to wait
      var now = new Date();
      if (now.getTime() > signupStartTime){
        refreshForms();
      }
      
    }
    
  }                        
}

function EntryValidation(projectItemResponses){
    
 
  //Checks to make sure that the start dates of the project and the shifts 
  //are before their respective end dates.
  //If true, return true, otherwise, return false.
  
  //Boolean variables initialized to false.
  //If there are problems in the corresponding areas, set to true.
  //If any variables are true, delete the entry and email the creator.

  var problems = {projectNameAlreadyUsed: false,
                  projectStartInThePast: false,
                  projectBoundTimesInvalid: false,
                  shift1BoundTimesInvalid: false,
                  shift2BoundTimesInvalid: false,
                  shift3BoundTimesInvalid: false,
                  shift4BoundTimesInvalid: false,
                  signupStartTooLate: false,
                  signupEndAfterProjectStart: false,
                  signupStartEndBoundsInvalid: false};
  
  //Variables neded to determine the above
  var projectName;
  var signupStartTime;
  var signupEndTime;
  var projectStartTime;
  var projectEndTime;
  var shift1StartTime;
  var shift2StartTime;
  var shift3StartTime;
  var shift4StartTime;
  var shift1EndTime;
  var shift2EndTime;
  var shift3EndTime;
  var shift4EndTime;
  
  //Helps with parsing
  var numberOfShifts;
  //Make an array pf the response titles for easy searching
  var itemResponseObject;
  var itemTitles = [];  
  for (var i=0;i<projectItemResponses.length;i++){
    itemResponseObject = projectItemResponses[i];
    var title = itemResponseObject.getItem().getTitle();
    itemTitles.push(title);
  }  
  
  //Go through and find the start/end times for the project and every shift
  var j;
  
  j = itemTitles.indexOf("Event/Project Name");
  projectName = projectItemResponses[j].getResponse();
  
  j = itemTitles.indexOf("Number of Shifts");
  numberOfShifts = projectItemResponses[j].getResponse();
  
  j = itemTitles.indexOf("Project Start Date/Time");
  projectStartTime = getDateObjectFromString(projectItemResponses[j].getResponse()).getTime();
  
  j = itemTitles.indexOf("Project End Date/Time");
  projectEndTime = getDateObjectFromString(projectItemResponses[j].getResponse()).getTime();   
  
  //Have to be careful because the signup dates aren't necessarily defined.
  j = itemTitles.indexOf("Signup Start Date");
  if (!(projectItemResponses[j] === undefined || projectItemResponses[j] === null)){
    signupStartTime = getDateObjectFromString(projectItemResponses[j].getResponse()).getTime();
  }
  
  j = itemTitles.indexOf("Signup End Date");
  if (!(projectItemResponses[j] === undefined || projectItemResponses[j] === null)){
    signupEndTime = getDateObjectFromString(projectItemResponses[j].getResponse()).getTime();
    Logger.log("signup End Time from Parse Date to seconds: " + signupEndTime);
    Logger.log("signup End Time " + projectItemResponses[j].getResponse());
  }
  
  if (numberOfShifts == "2"){
    j = itemTitles.indexOf("Shift 1 of 2 Start Time");
    shift1StartTime = getDateObjectFromString(projectItemResponses[j].getResponse()).getTime(); 
    
    j = itemTitles.indexOf("Shift 1 of 2 End Time");
    shift1EndTime = getDateObjectFromString(projectItemResponses[j].getResponse()).getTime(); 
    
    j = itemTitles.indexOf("Shift 2 of 2 Start Time");
    shift2StartTime = getDateObjectFromString(projectItemResponses[j].getResponse()).getTime(); 
    
    j = itemTitles.indexOf("Shift 2 of 2 End Time");
    shift2EndTime = getDateObjectFromString(projectItemResponses[j].getResponse()).getTime();
  }
  if (numberOfShifts == "3"){
    j = itemTitles.indexOf("Shift 1 of 3 Start Time");
    shift1StartTime = getDateObjectFromString(projectItemResponses[j].getResponse()).getTime(); 
    
    j = itemTitles.indexOf("Shift 1 of 3 End Time");
    shift1EndTime = getDateObjectFromString(projectItemResponses[j].getResponse()).getTime(); 
    
    j = itemTitles.indexOf("Shift 2 of 3 Start Time");
    shift2StartTime = getDateObjectFromString(projectItemResponses[j].getResponse()).getTime(); 
    
    j = itemTitles.indexOf("Shift 2 of 3 End Time");
    shift2EndTime = getDateObjectFromString(projectItemResponses[j].getResponse()).getTime();
    
    j = itemTitles.indexOf("Shift 3 of 3 Start Time");
    shift3StartTime = getDateObjectFromString(projectItemResponses[j].getResponse()).getTime(); 
    
    j = itemTitles.indexOf("Shift 3 of 3 End Time")
    shift3EndTime = getDateObjectFromString(projectItemResponses[j].getResponse()).getTime();
  }
  if (numberOfShifts == "4"){
    j = itemTitles.indexOf("Shift 1 of 4 Start Time");
    shift1StartTime = getDateObjectFromString(projectItemResponses[j].getResponse()).getTime(); 
    
    j = itemTitles.indexOf("Shift 1 of 4 End Time");
    shift1EndTime = getDateObjectFromString(projectItemResponses[j].getResponse()).getTime(); 
    
    j = itemTitles.indexOf("Shift 2 of 4 Start Time");
    shift2StartTime = getDateObjectFromString(projectItemResponses[j].getResponse()).getTime(); 
    
    j = itemTitles.indexOf("Shift 2 of 4 End Time");
    shift2EndTime = getDateObjectFromString(projectItemResponses[j].getResponse()).getTime();
    
    j = itemTitles.indexOf("Shift 2 of 4 Start Time");
    shift2StartTime = getDateObjectFromString(projectItemResponses[j].getResponse()).getTime(); 
    
    j = itemTitles.indexOf("Shift 2 of 4 End Time")
    shift2EndTime = getDateObjectFromString(projectItemResponses[j].getResponse()).getTime();
    
    j = itemTitles.indexOf("Shift 3 of 4 Start Time");
    shift3StartTime = getDateObjectFromString(projectItemResponses[j].getResponse()).getTime(); 
    
    j = itemTitles.indexOf("Shift 3 of 4 End Time")
    shift3EndTime = getDateObjectFromString(projectItemResponses[j].getResponse()).getTime();
    
    j = itemTitles.indexOf("Shift 4 of 4 Start Time");
    shift4StartTime = getDateObjectFromString(projectItemResponses[j].getResponse()).getTime(); 
    
    j = itemTitles.indexOf("Shift 4 of 4 End Time")
    shift4EndTime = getDateObjectFromString(projectItemResponses[j].getResponse()).getTime();
  }

  //Check if project name is unique
  var currentProjectsSpreadSheet = SpreadsheetApp.openById("1T6QaKngOqfaxf6kyLDtSdCMeATiFGF5jxlsDwE5ABNw");
  var currentProjectsSheet = currentProjectsSpreadSheet.getSheets()[0];
  var dataRange = currentProjectsSheet.getDataRange();
  
  var numParameters = dataRange.getWidth();
  var numProjects = dataRange.getHeight()-1;
  
  var nameIndex;
  for (var j=0;j<numParameters;j++){
    if (currentProjectsSheet.getRange(1, j+1).getValue() == "Event/Project Name"){
      nameIndex = j+1;
    }
  }
  
  for (var i=0;i<numProjects;i++){
    if (currentProjectsSheet.getRange(i+2,nameIndex).getValue() == projectName){
      problems.projectNameAlreadyUsed = true;
    }
  }
  
// Detect if the start and end times are appropiate
  
  var now = new Date();
  if (now.getTime() > projectStartTime){
    problems.projectStartInThePast = true;
  }
  if (projectEndTime < projectStartTime){
    problems.projectBoundTimesInvalid = true; 
  }
  if (numberOfShifts == "2" || numberOfShifts == "3" || numberOfShifts == "4"){
    if (shift1EndTime < shift1StartTime){
      problems.shift1BoundTimesInvalid = true;
    }
    if (shift2EndTime < shift2StartTime){
      problems.shift2BoundTimesInvalid = true;
    }
  }
  if (numberOfShifts == "3" || numberOfShifts == "4"){
    if (shift3EndTime < shift3StartTime){
      problems.shift3BoundTimesInvalid = true;
    }
  }
  if (numberOfShifts == "4"){
    if (shift4EndTime < shift4StartTime){
      problems.shift4BoundTimesInvalid = true;
    }
  }
    
  //============================================================================
  //
  //     Now consider the project signup bound times
  //    
  //============================================================================
  
  if (!signupStartTime){
    //We want to set the signup start date to the current time and date.    
    signupStartTime = now.getTime();
  }
    
  //Handle Case 1a: User did NOT enter a signup end date:
  if (!signupEndTime){
    Logger.log("Signup End Time2" + signupEndTime);
    //If there is no signup end date, then get the time of 24 hours before the start in ms
    var imposedSignupEndDateSeconds = projectStartTime - (24*60*60*1000);
    //If the signup start date is after the imposed signup end date, set the imposed signup end date to 1 hour before the event start
    //We have not yet checked the signup state date, but now.getTime() is the earliest that we will permit it to be...
    if (signupStartTime > imposedSignupEndDateSeconds){
      imposedSignupEndDateSeconds += (23*60*60*1000);
      //If thesignup start date is after 1 hour before the start of the event, send an error email. See SendErrorEmail() for more details
      if (signupStartTime > imposedSignupEndDateSeconds){
        problems.signupStartTooLate = true;
      }
    }
    signupEndTime = imposedSignupEndDateSeconds;     
  }
  //If signupEndDate is defined, make sure it is before the project start date.
  else{
    if (signupEndTime > projectStartTime){
      //If the signupEndDate is defined to be after the project starts, send an error email.
      problems.signupEndAfterProjectStart = true;
    }
  }

  //Handle Case 2b: Check to make sure that the signup start and end times make sense
    if (signupStartTime > signupEndTime){
      problems.signupStartEndBoundsInvalid = true;
    }
  Logger.log("SIGNUPENDTIME: " + signupEndTime);
  Logger.log("SIGNUPSTARTTIME: " + signupStartTime);
  return [problems, signupStartTime, signupEndTime];
    
}

function SendProjectApprovedEmail(projectItemResponses, projectRosterSheet){
  var itemResponseObject;
  var itemTitles = [];  
  for (var i=0;i<projectItemResponses.length;i++){
    itemResponseObject = projectItemResponses[i];
    var title = itemResponseObject.getItem().getTitle();
    itemTitles.push(title);
  }  
  var j;
  
  j = itemTitles.indexOf("Your Email Address");
  var submitterEmail = projectItemResponses[j].getResponse();
  
  j = itemTitles.indexOf("Project Chairperson Email Address");
  var chairEmail = projectItemResponses[j].getResponse();
  
  j = itemTitles.indexOf("Event/Project Name");
  var projectName = projectItemResponses[j].getResponse();
   
  var MessageHTML = "Dear Project Creator,<br><br>";
  MessageHTML += "Your recently submitted project, '"+ projectName + "' has been approved and will now appear on the signup list<br><br>";
  MessageHTML += "Here are the details for this project: <br><br>";
  //Do a for loop with one line for every details in the projectItemResponses thing;
  for (var n=0;n<projectItemResponses.length;n++){
    MessageHTML += projectItemResponses[n].getItem().getTitle() + ": " + projectItemResponses[n].getResponse() + "<br>";   
  }
  MessageHTML +="<br>Thank you for creating this project.<br><br>";
  MessageHTML +="Circle K Project Signup Creator Bot";
  
    GmailApp.sendEmail(submitterEmail + "," + chairEmail, "Circle K Project: '"+ projectName + "' Created", "", {htmlBody: MessageHTML});
}

function SendErrorEmail(projectItemResponses, Problems){
  var itemResponseObject;
  var itemTitles = [];  
  for (var i=0;i<projectItemResponses.length;i++){
    itemResponseObject = projectItemResponses[i];
    var title = itemResponseObject.getItem().getTitle();
    itemTitles.push(title);
  }  
  var j;
  
  j = itemTitles.indexOf("Your Email Address");
  var email = projectItemResponses[j].getResponse();
  
    j = itemTitles.indexOf("Event/Project Name");
  var projectName = projectItemResponses[j].getResponse();
  
  var MessageHTML = "Dear Project Creator,<br><br>";
  MessageHTML += "Your recently submitted project, "+ projectName + " could not be created due to the following errors:";
  MessageHTML += "<br><br>";
  if (Problems.projectNameAlreadyUsed){
    MessageHTML += "     - A project with this name currently already exists.<br>";
  }    
  if (Problems.projectStartInThePast){
    MessageHTML += "     - Project began in the past.<br>";
  }    
  if (Problems.projectBoundTimesInvalid){
    MessageHTML += "     - Project End time occurs before project start time.<br>";
  }
  if (Problems.shift1BoundTimesInvalid){
    MessageHTML += "     - Shift 1 End time occurs before shift 1 start time.<br>";
  }
  if (Problems.shift2BoundTimesInvalid){
    MessageHTML += "     - Shift 2 End time occurs before shift 2 start time.<br>";
  }
  if (Problems.shift3BoundTimesInvalid){
    MessageHTML += "     - Shift 3 End time occurs before shift 3 start time.<br>";
  }
  if (Problems.shift4BoundTimesInvalid){
    MessageHTML += "     - Shift 4 End time occurs before shift 4 start time.<br>";
  }
  if (Problems.signupStartTooLate){
    MessageHTML += "     - If you create a project within one hour of the start of that project, you must specify the project signup end time.<br>";
  }
  if (Problems.signupEndAfterProjectStart){
    MessageHTML += "     - Project signup close time cannot be after the start of the event.<br>";
  } 
  if (Problems.signupStartEndBoundsInvalid){
    MessageHTML += "     - Project signup open date cannot be after the project signup close date.<br>";
  }                                
  
  MessageHTML+="<br>";
  MessageHTML+="Because of this/these errors, your project was not created. Please fix these errors and resubmit the project.";
  MessageHTML+="<br><br>";
  MessageHTML+="Thank you,";
  MessageHTML+="<br>";
  MessageHTML+="Circle K Project Signup Creator Bot";
  
  
  GmailApp.sendEmail(email, "Project Entry:" +projectName + " Invalid", "", {htmlBody: MessageHTML});

}

function addResponsetoSpreadsheet(projectItemResponses, signupStartTime, signupEndTime){
  var currentProjectsSheetID = "1T6QaKngOqfaxf6kyLDtSdCMeATiFGF5jxlsDwE5ABNw";
  var currentProjectsSpreadsheet = SpreadsheetApp.openById(currentProjectsSheetID);
  var currentProjectsSheet = currentProjectsSpreadsheet.getSheets()[0];
  
  var numProjectsinSheet = currentProjectsSheet.getDataRange().getHeight()-1;
  var numParameters = currentProjectsSheet.getDataRange().getWidth();

  var data = [];
  
  var now = new Date();
  data.push(now.getTime());
  
  var responseTitles = [];
  //Have to use numParameters because if projectItemResponses has some empty parameters, it will still have those elements, they will just be
  //empty. numParameters greater than the max number of elements it could ever have.
  for (var n=0;n<numParameters;n++){
    if (!(projectItemResponses[n] === undefined || projectItemResponses[n] === null)){
      responseTitles.push(projectItemResponses[n].getItem().getTitle());    
    }
    else {
     responseTitles.push(""); 
    }
  }
  //Loop through all of the new responses and fill in a new row of the spreadsheet with them.
  for (var j=1;j<numParameters;j++){
    var index = responseTitles.indexOf(currentProjectsSheet.getRange(1, j+1).getValue());
    if (index != -1) {
      //Since the signup start and end dates might be modified, we handle them separately.
      if (currentProjectsSheet.getRange(1, j+1).getValue() == "Signup Start Date"){
        var signupStartDate = new Date(signupStartTime);
        data.push(signupStartDate);
      }
      else if (currentProjectsSheet.getRange(1, j+1).getValue() == "Signup End Date"){
        var signupEndDate = new Date(signupEndTime);
        data.push(signupEndDate);
      }
      else{
        data.push(projectItemResponses[index].getResponse());
      }
    }
    else {
     data.push(" "); 
    }
  }
  currentProjectsSheet.getRange(numProjectsinSheet+2, 1, 1, numParameters).setValues([data]);
  
}


/* This function parses the signups from the "Submit a Project (Responses)" spreadsheet,
   and dynamically creates the signups form depending on the upcoming projects */

function refreshForms() {
  // This function refreshes the form from which Circle K members can sign up for projects, so that it is always showing the relevant projects
  // It also updates the project deletion form, where board members can delete bad projects. 
  
  // Sleep to make sure that the excel spreadsheet has been updated completely before we try to reference it.
  Utilities.sleep(5000);
  
  //Signup Form for members to sign up for projects
  var signupForm = FormApp.openById("1rnd_UjQCiSZt44jTQWdAfREx3sYgig2joyhQfbVssDs");
  var signupFormItems = signupForm.getItems();
  
  //Before we do anything, lets temporarily disable it. Otherwise it has been known to cause errors.
  signupForm.setAcceptingResponses(false);
  
  //Delete Form for board members to delete unwanted projects
  var deletionForm = FormApp.openById("1Ux_hxW6lqa12cFYMXK54ojVrrhP-HfU_b6lBzXRYbJo");
  var deletionFormItems = deletionForm.getItems();
  if (deletionFormItems.length > 0){
    deletionForm.deleteItem(0);
  }
  // Edit Form for board members to edit current projects
  var editForm = FormApp.openById("14CvIlTulxEwQpRAWUanoQa-sdZVSk2clYZLjiUpcl7s");
  var editFormItem = editForm.getItems()[0].asMultipleChoiceItem(); 
  
  //For loop deletes all items except the default first two (Name and Email)
  //for (var m=0;m<signupFormItems.length-2;m++){
  //  signupForm.deleteItem(signupFormItems[m+2]); 
  //}
  
  //Get access to the custom spreadsheet handled by the submit a project form, and take
  // a look at which projects are coming up.
  var currentProjectsSpreadsheet = SpreadsheetApp.openById("1T6QaKngOqfaxf6kyLDtSdCMeATiFGF5jxlsDwE5ABNw");
  var currentProjectsSheet = currentProjectsSpreadsheet.getSheets()[0];
  var dataRange = currentProjectsSheet.getDataRange();
  
  var numProjects = dataRange.getHeight()-1; 
  var numParameters = dataRange.getWidth();
   
  //These are the parameters we want to collect for each project
  var projectName;
  var projectType; //Either a service project or social event.
  var projectLocation
  var projectChair;
  var projectChairEmail;
  var projectSignupStartTime;
  var projectStartTime;
  var projectEndTime;
  var projectDescription;
  var askNeedRide;
  var startDate;
  var endDate;
  
  var numShifts;
  var shiftStartTime = [];
  var shiftEndTime = [];
  
  var projectTitles = [];
  
  var myCheckboxItem; // This is the checkbox portion of the form project entry
  var myHeaderItem; // This is the information display portion of the form project entry
 
  // Some variables for the for-loop
  var itemTitles = [];
  var j;
   
  //Going to do a for loop to make an array containing the information for each question/banner. Then I will compare
  //That information against the current projects spreadsheet. Add new items if i need, and remove old items if i need.
  var signupItemBannerTitles = [];
  var signupItemBannerDescriptions = [];
  
  for (var u=0;u<signupFormItems.length;u++){
    if (signupFormItems[u].getType() == FormApp.ItemType.SECTION_HEADER){
      signupItemBannerTitles.push(signupFormItems[u].getTitle());
      signupItemBannerDescriptions.push(signupFormItems[u].getHelpText())
    }
  }
  Logger.log("SIGNUPBANNER TITLES: " + signupItemBannerTitles);
  Logger.log("SIGNUPBANNER DESCRIPTIONS: " + signupItemBannerDescriptions);
  
  
  
  //For loop finds key values of each project
  for (var j=0;j<numParameters;j++){
    itemTitles.push(currentProjectsSheet.getRange(1, j+1).getValue());
  }
  
  var startTime = [];
  var order =  []; //This is an array where index represents the order number, and the number at that index represents the project number in the list
  var tempTime;
  //Do sort through all projects and find the start date
  //The projects are listed in order, we will sort them in the following loop.
  for (var k=0;k<numProjects;k++){
    j = itemTitles.indexOf("Project Start Date/Time");
    tempTime = currentProjectsSheet.getRange(k+2, j+1).getValue().getTime();  
    startTime.push(tempTime);
    order.push(k);
  }
  //This algorithm puts the indices of the current projects spreadsheet in order of start times, with the closest upcoming projects nearest to the top.
  for (var l=0;l<startTime.length-1;l++){
    for (var m=0;m<startTime.length-l-1;m++){
      if (startTime[m] > startTime[m+1]){
        var temp1 = startTime[m];
        var temp2 = order[m];
        
        startTime[m] = startTime[m+1];
        startTime[m+1] = temp1;
        
        order[m] = order[m+1];
        order[m+1] = temp2;        
      }
    }
  }
  
  var FormItemIndexCounter = 0; //To count where we are as we add form items to the form.
  //Do a loop to add each project to the form.
  for (var a=0;a<order.length;a++){
    
    shiftStartTime = [];
    shiftEndTime = [];
    
    var i = order[a];
    Logger.log("Index a: " + a);
    Logger.log("Index i: " + i);
    
    j = itemTitles.indexOf("Event/Project Name");
    projectName = currentProjectsSheet.getRange(i+2, j+1).getValue(); 
    projectTitles.push(projectName); //This is for the deletion Form
    
    j = itemTitles.indexOf("Type of Event");
    projectType = currentProjectsSheet.getRange(i+2, j+1).getValue();
    
    j = itemTitles.indexOf("Project Location");
    projectLocation = currentProjectsSheet.getRange(i+2, j+1).getValue();
    
    j = itemTitles.indexOf("Project Chairperson");
    projectChair = currentProjectsSheet.getRange(i+2, j+1).getValue();
    
    j = itemTitles.indexOf("Project Chairperson Email Address");
    projectChairEmail = currentProjectsSheet.getRange(i+2, j+1).getValue();
    
    j = itemTitles.indexOf("Number of Shifts");
    numShifts = parseInt(currentProjectsSheet.getRange(i+2, j+1).getValue(), 10);
    
    j = itemTitles.indexOf("Signup Start Date");
    projectSignupStartTime = (currentProjectsSheet.getRange(i+2,j+1).getValue().getTime());
    
    j = itemTitles.indexOf("Project Start Date/Time");
    projectStartTime = (currentProjectsSheet.getRange(i+2,j+1).getValue());
    
    j = itemTitles.indexOf("Project End Date/Time");
    projectEndTime = (currentProjectsSheet.getRange(i+2,j+1).getValue());
    
    j = itemTitles.indexOf("Event Description");
    projectDescription = (currentProjectsSheet.getRange(i+2,j+1).getValue());
   
    if (numShifts == 1){
      //j = itemTitles.indexOf("Project Start Date/Time")
      //shiftStartTime.push(currentProjectsSheet.getRange(i+2, j+1).getValue());
      //shiftEndTime.push(currentProjectsSheet.getRange(i+2, j+2).getValue());
    }    
    else if (numShifts == 2){
      j = itemTitles.indexOf("Shift 1 of 2 Start Time");
      shiftStartTime.push(currentProjectsSheet.getRange(i+2, j+1).getValue());
      shiftEndTime.push(currentProjectsSheet.getRange(i+2, j+2).getValue());
      shiftStartTime.push(currentProjectsSheet.getRange(i+2, j+3).getValue());
      shiftEndTime.push(currentProjectsSheet.getRange(i+2, j+4).getValue());
    }
    else if (numShifts == 3){
      j = itemTitles.indexOf("Shift 1 of 3 Start Time");
      shiftStartTime.push(currentProjectsSheet.getRange(i+2, j+1).getValue());
      shiftEndTime.push(currentProjectsSheet.getRange(i+2, j+2).getValue());
      shiftStartTime.push(currentProjectsSheet.getRange(i+2, j+3).getValue());
      shiftEndTime.push(currentProjectsSheet.getRange(i+2, j+4).getValue());
      shiftStartTime.push(currentProjectsSheet.getRange(i+2, j+5).getValue());
      shiftEndTime.push(currentProjectsSheet.getRange(i+2, j+6).getValue());
    }
    else if (numShifts == 4){
      j = itemTitles.indexOf("Shift 1 of 4 Start Time");
      shiftStartTime.push(currentProjectsSheet.getRange(i+2, j+1).getValue());
      shiftEndTime.push(currentProjectsSheet.getRange(i+2, j+2).getValue());
      shiftStartTime.push(currentProjectsSheet.getRange(i+2, j+3).getValue());
      shiftEndTime.push(currentProjectsSheet.getRange(i+2, j+4).getValue());
      shiftStartTime.push(currentProjectsSheet.getRange(i+2, j+5).getValue());
      shiftEndTime.push(currentProjectsSheet.getRange(i+2, j+6).getValue());
      shiftStartTime.push(currentProjectsSheet.getRange(i+2, j+7).getValue());
      shiftEndTime.push(currentProjectsSheet.getRange(i+2, j+8).getValue());
    }
    else{
      Logger.log("Number of Shifts Error");
    }
    
   
    j = itemTitles.indexOf("Ask If they Need a Ride?");
    if (currentProjectsSheet.getRange(i+2, j+1).getValue() == "Yes"){
      askNeedRide = true;
    }
    else{ 
      askNeedRide = false;
    }   
    
    //If statement: If we are past project start time, start signups by putting the project on the list.
    var now = new Date();
    
    
    if (projectSignupStartTime <= now.getTime()){
      
      var titleIndex;
      var descriptionIndex;
      
      var searchTitleArray;
      var searchDescriptionArray;
      
      var found = false;

      
      //For the description, if there are multiple shifts, mention which shift it is.
      var myDescription = DatetoWords(projectStartTime, projectEndTime);
      //var rosterSpreadsheet = SpreadsheetApp.open(getRosterSpreadSheetFile(projectName + " - " + myDescription));
      myDescription += "\nLocation: " + projectLocation + "\n";
      myDescription += "Project Chairperson: " + projectChair + "\n";
      myDescription += "Project Chairperson Email: " + projectChairEmail + "\n";
      //myDescription += "Link to current Roster: " + getShortUrl(rosterSpreadsheet.getUrl()) + "\n";
      myDescription += projectType;
      myDescription += "\n\n" + projectDescription;
      
      
      Logger.log("MyTitle: " + projectName);
      Logger.log("MyDescription: " + myDescription);
      
      
      //Search through the form and check if all of the current projects are listed. Then add and delete projects as necessary.
      searchTitleArray = signupItemBannerTitles.slice(0);
      titleIndex = null;
      while ((titleIndex != -1) && (found == false)){
        descriptionIndex = null;
        searchDescriptionArray = signupItemBannerDescriptions.slice(0);
        titleIndex = searchTitleArray.lastIndexOf(projectName);
        Logger.log("TitleIndex: " + titleIndex);
        while ((titleIndex != -1) && (descriptionIndex != -1) && (found == false)){
          descriptionIndex  = searchDescriptionArray.lastIndexOf(myDescription);   
          Logger.log("DescriptionIndex: " + descriptionIndex);
          if (descriptionIndex == titleIndex){           
            //Now that we know the item is in the form somewhere, let's find it.          
            for (var t=0;t<signupFormItems.length;t++){
              if (signupFormItems[t].getTitle() == signupItemBannerTitles[titleIndex] && signupFormItems[t].getHelpText() == signupItemBannerDescriptions[titleIndex]){
                for (var x=0;x<=numShifts;x++){
                 signupForm.moveItem(signupFormItems[t+x], 2 + FormItemIndexCounter);
                 FormItemIndexCounter +=1;
                }
              }
            }
            //Now remove it so we dont search it next time.
            found = true;
            signupItemBannerTitles.splice(titleIndex,1);
            signupItemBannerDescriptions.splice(descriptionIndex, 1);
            Logger.log("Found: " + found);
                  
          }
          else {
            searchDescriptionArray.splice(descriptionIndex,1); 
          }
        }
        searchTitleArray.splice(titleIndex,1);
      }
      if (found == false){

        myHeaderItem   = signupForm.addSectionHeaderItem();
        
        //In order to revert from a specific type of item (i.e. type SectionHeaderItem to type Item), you must call a function that will return that item.
        //So get do getItemById
        signupForm.moveItem(signupForm.getItemById(myHeaderItem.getId()), 2 + FormItemIndexCounter);
        FormItemIndexCounter += 1;
        
        //Set title. 
        myHeaderItem.setTitle(projectName);
        myHeaderItem.setHelpText(myDescription);
        
        // For loop: Create one signup entry for every shift
        for (var n=0;n<numShifts;n++){
          
          myCheckboxItem = signupForm.addCheckboxItem();
          signupForm.moveItem(signupForm.getItemById(myCheckboxItem.getId()), 2 + FormItemIndexCounter);
          FormItemIndexCounter +=1;
          
          //Set Choices
          var choiceValues = ["Attending"];
          if (askNeedRide){
            choiceValues.push("Need Ride");
          }
          myCheckboxItem.setChoiceValues(choiceValues);
          if (numShifts > 1){
            var myCheckboxTitle = "Shift " + (n+1).toString() + ": " + DatetoWords(shiftStartTime[n], shiftEndTime[n]);
            myCheckboxItem.setTitle(myCheckboxTitle) 
          }
        }
        
      }  
      
      
      
    }
  }

 // I sorted through the entire list and put all the items where they should be. Any project that has recently expired has been moved to th bottom.
  //Thus we can simple remove all of the expired items by deleting them after FormItemIndexCounter. 
  
  var allFormItems = signupForm.getItems();
  if (2 + FormItemIndexCounter < allFormItems.length){
    for (var y=allFormItems.length-1;y>=2 + FormItemIndexCounter;y--){
      signupForm.deleteItem(y);
    }
  }
   
  //Make the signup form available again.
  signupForm.setAcceptingResponses(true);
  
  
  if(typeof projectTitles != "undefined" && projectTitles != null && projectTitles.length > 0){
    var deletionFormItem = deletionForm.addListItem();
    deletionFormItem.setTitle("Choose Project to Delete");
    deletionFormItem.setHelpText("This project will be removed from the project signup form and all its connections disposed of properly");
    deletionFormItem.setChoiceValues(projectTitles);
    deletionFormItem.setRequired(true);
    
    editForm.setAcceptingResponses(true);
    editFormItem.setChoiceValues(projectTitles);
  }
  else {
    editForm.setAcceptingResponses(false);
    editFormItem.setChoiceValues(["There are no current Projects to edit"]); 
    
  }
  
}

function getDateObjectFromString(DateString){
  //DateString comes in the format "YYYY-MM-DD HH:MM" 
  //When the function parseInt sees the "0" in front of the string it interprets it as an octal integer (base 8), which causes problems for the values 08 and 09.
  //To solve this, we pass a second argument to it specifying the standard base 10 system. 
  Logger.log("getDateObjectFromString: " + DateString);
  var YYYY = parseInt(DateString.substr(0,4), 10);
  var MM = parseInt(DateString.substr(5,2), 10)-1; //0-11;
  var DD = parseInt(DateString.substr(8,2), 10);
  var HH = parseInt(DateString.substr(11,2), 10);
  var MINS = parseInt(DateString.substr(14,2), 10);
  
  Logger.log("Day Substring: " + DateString.substr(8,2));
  Logger.log("Year: " + YYYY);
    Logger.log("Month: " + MM);
    Logger.log("Day: " + DD);
    Logger.log("Hour: " + HH);
    Logger.log("Minutes: " + MINS);
  var myDate = new Date(YYYY, MM, DD, HH, MINS, 0, 0);
  Logger.log("DateTime: " + myDate.getTime());
  return myDate;
}

function ConvertDateToString(date){
    //Format for the date is: "YYYY-MM-DD-YYYY HH:MM" when working in google forms
    //Unfortunately formatting the date properly takes several lines of code
  Logger.log("Convert Date to String: " + date);
  var DD = date.getDate();
  var MM = date.getMonth()+1; //January is 0!
  var YYYY = date.getFullYear();
  var HH = date.getHours(); //0-23
  var MINS = date.getMinutes(); //0-59
  var SECS = date.getSeconds(); //0-59
  
  if(DD<10) {
    //Convert months 1-9 to 01-09.
    DD='0'+DD;
  } 
  
  if(MM<10) {
    //Convert days 1-9 to 01-09.
    MM='0'+MM; 
  } 
  
  if (MINS<10){
    //Convert Mins 1-9 to 01-09
    MINS = '0'+MINS;
  }

  var nowDate = YYYY+"-"+MM+"-"+DD+" "+HH+":"+MINS;
  return nowDate;
}

function DatetoWords(startDate, endDate){
 //This function expects Javascript Date objects as its arguments. 
  
  var MM = startDate.getMonth(); //0-11, January is 0!
  var DD = startDate.getDate();
  var YYYY = startDate.getFullYear();
  var HH = startDate.getHours();//0-23
  var MINS = startDate.getMinutes();//0-59
  var hourSet = "AM";
  var startDate = new Date(YYYY,MM,DD,HH,MINS,0,0);
  
  //Find integers corresponding to the end time
  var MM2 = endDate.getMonth(); //0-11, January is 0!
  var DD2 = endDate.getDate();
  var YYYY2 = endDate.getFullYear();
  var HH2 = endDate.getHours();//0-23
  var MINS2 = endDate.getMinutes();//0-59
  var hourSet2 = "AM";
  var endDate = new Date(YYYY2,MM2,DD2,HH2,MINS2,0,0);
  
  //Determine the words corresponding to the integers given to us for the month, day
  var monthWord = getMonthFromInt(parseInt(MM), 10);
  var dayWord = getDayFromInt(startDate.getDay());
  var monthWord2 = getMonthFromInt(parseInt(MM2), 10);
  var dayWord2 = getDayFromInt(endDate.getDay());
  
  //Check for am vs pm
  if (HH > 11){
    hourSet = "PM";
    HH -= 12; 
  }
  if (HH == 0){
    HH = 12; 
  }
  HH = HH.toString()
  if (HH2 > 11){
    hourSet2 = "PM";
    HH2 -= 12; 
  }
  if (HH2 == 0){
    HH2 = 12; 
  }
  HH2 = HH2.toString();
  
  //Recast Minutes to have leading '0' if necessary
  if (MINS < 10){
    MINS = "0" + MINS.toString();
  }
  else{
    MINS = MINS.toString();
  }
  if (MINS2 < 10){
    MINS2 = "0"+MINS2.toString();
  }
  else {
    MINS2.toString();
  }

  //Now that everything has been examined, cast it all to string type
  YYYY = YYYY.toString();
  YYYY2= YYYY2.toString();
  MM = MM.toString();
  MM2 = MM2.toString();
  DD = DD.toString();
  DD2 = DD2.toString();

  var Words = "Error: Date not Parsed Correctly";
  if ((YYYY==YYYY2) && (DD==DD2) && (MM==MM2)){
    Words = dayWord + ", " + monthWord + " " + DD + ", " + YYYY + " ";
    Words += HH + ":" + MINS + " " + hourSet + " - " + HH2 + ":" + MINS2 + " " + hourSet2;  
  }
  else{
    Words = dayWord + ", " + monthWord + " " + DD + ", " + YYYY + " " + HH+":"+MINS + " " + hourSet + " - ";
    Words += dayWord2 + ", " + monthWord2 + " " + DD2 + ", " + YYYY2 + " " + HH2+":"+MINS2 + " " + hourSet2;
  }
      
  return Words;  
  
}
 
function getMonthFromInt(monthInt){
 var monthWord = "Error Parsing Month";
  
  switch (monthInt){
    case 0:
      monthWord = "January";
      break;
    case 1:
      monthWord = "February";
      break;
    case 2:
      monthWord = "March";
      break;
    case 3:
      monthWord = "April";
      break;
    case 4:
      monthWord = "May";
      break;
    case 5:
      monthWord = "June";
      break;
    case 6:
      monthWord = "July";
      break;
    case 7:
      monthWord = "August";
      break;
    case 8:
      monthWord = "September";
      break;
    case 9:
      monthWord = "October";
      break;
    case 10:
      monthWord = "November";
      break;
    case 11:
      monthWord = "December";
      break;
  }
  return monthWord;
  
}

function getDayFromInt(dayInt){
   
  var dayWord = "Error Parsing Day of the Week";
  
  switch (dayInt){
    case 0:
      dayWord = "Sunday";
      break;
    case 1:
      dayWord = "Monday";
      break;
    case 2:
      dayWord = "Tuesday";
      break;
    case 3:
      dayWord = "Wednesday";
      break;
    case 4:
      dayWord = "Thursday";
      break;
    case 5:
      dayWord = "Friday";
      break;
    case 6:
      dayWord = "Saturday";
      break;
  }
  return dayWord;
}

function createProjectResponseSheet(projectItemResponses){

  var itemResponseObject;
  var itemTitles = [];  
  for (var i=0;i<projectItemResponses.length;i++){
    itemResponseObject = projectItemResponses[i];
    var title = itemResponseObject.getItem().getTitle();
    itemTitles.push(title);
  }  
  var j;
  
  j　=　itemTitles.indexOf("Number of Shifts");
  var numShifts = parseInt(projectItemResponses[j].getResponse(), 10);

  j = itemTitles.indexOf("Event/Project Name");
  var projectName = projectItemResponses[j].getResponse();
  
  j = itemTitles.indexOf("Project Start Date/Time");
  var projectStartTime = getDateObjectFromString(projectItemResponses[j].getResponse());
  
  j = itemTitles.indexOf("Project End Date/Time");
  var projectEndTime = getDateObjectFromString(projectItemResponses[j].getResponse());
  
  j = itemTitles.indexOf("Project Chairperson Email Address");
  var projectChairEmail = projectItemResponses[j].getResponse();
  
  j = itemTitles.indexOf("Ask If they Need a Ride?");
  var askIfNeedRide = (projectItemResponses[j].getResponse() == "Yes");
  
  j = itemTitles.indexOf("Project Chairperson");
  var projectChair = projectItemResponses[j].getResponse();
  
  var shiftStartTime = [];
  var shiftEndTime = [];
  
  if (numShifts == 1){
    //Kind of "sloppy" coding... I just will keep the spreadsheet so that end ime is the index one after start ime.
    j = itemTitles.indexOf("Project Start Date/Time")
    shiftStartTime.push(getDateObjectFromString(projectItemResponses[j].getResponse()));
    shiftEndTime.push(getDateObjectFromString(projectItemResponses[j+1].getResponse()));
  }    
  else if (numShifts == 2){
    j = itemTitles.indexOf("Shift 1 of 2 Start Time");
    shiftStartTime.push(getDateObjectFromString(projectItemResponses[j].getResponse()));
    shiftEndTime.push(getDateObjectFromString(projectItemResponses[j+1].getResponse()));
    shiftStartTime.push(getDateObjectFromString(projectItemResponses[j+2].getResponse()));
    shiftEndTime.push(getDateObjectFromString(projectItemResponses[j+3].getResponse()));
  }
  else if (numShifts == 3){
    j = itemTitles.indexOf("Shift 1 of 3 Start Time");
    shiftStartTime.push(getDateObjectFromString(projectItemResponses[j].getResponse()));
    shiftEndTime.push(getDateObjectFromString(projectItemResponses[j+1].getResponse()));
    shiftStartTime.push(getDateObjectFromString(projectItemResponses[j+2].getResponse()));
    shiftEndTime.push(getDateObjectFromString(projectItemResponses[j+3].getResponse()));
    shiftStartTime.push(getDateObjectFromString(projectItemResponses[j+4].getResponse()));
    shiftEndTime.push(getDateObjectFromString(projectItemResponses[j+5].getResponse()));

  }
  else if (numShifts == 4){
    j = itemTitles.indexOf("Shift 1 of 4 Start Time");
    shiftStartTime.push(getDateObjectFromString(projectItemResponses[j].getResponse()));
    shiftEndTime.push(getDateObjectFromString(projectItemResponses[j+1].getResponse()));
    shiftStartTime.push(getDateObjectFromString(projectItemResponses[j+2].getResponse()));
    shiftEndTime.push(getDateObjectFromString(projectItemResponses[j+3].getResponse()));
    shiftStartTime.push(getDateObjectFromString(projectItemResponses[j+4].getResponse()));
    shiftEndTime.push(getDateObjectFromString(projectItemResponses[j+5].getResponse()));
    shiftStartTime.push(getDateObjectFromString(projectItemResponses[j+6].getResponse()));
    shiftEndTime.push(getDateObjectFromString(projectItemResponses[j+7].getResponse()));
  }
  else{
    Logger.log("Number of Shifts Error");
  }
    
  var spreadsheetName = projectName + " - " + DatetoWords(projectStartTime, projectEndTime);
  var projectRosterSheet = SpreadsheetApp.create(spreadsheetName);
  //WE want to create a separate sheet for every shfit that there is. So, we create them all in a for loop, then delete the extra
  //sheet at the end.
  for (var i=1;i<=numShifts;i++){
  
    if (numShifts == 1){
      var sheetName = projectName + " - " + DatetoWords(shiftStartTime[0], shiftEndTime[0]);
    }
    else {
      var sheetName = projectName + " - " + DatetoWords(shiftStartTime[i-1],shiftEndTime[i-1])+ " - Shift " + i.toString();
    }
    var mySheet = projectRosterSheet.insertSheet(sheetName, i-1);
    var now = new Date();
    mySheet.getRange(2,1,1,3).setValues([[projectChair, projectChairEmail, now]])
    if (askIfNeedRide){
      mySheet.getRange(1, 1, 1, 4).setValues([["First and Last Name", "Email Address", "Timestamp", "Need Ride"]]);
      mySheet.getRange(2, 1, 1, 4).setValues([[projectChair, projectChairEmail, now, "No"]]);
    }
    else {
      mySheet.getRange(1, 1, 1, 3).setValues([["First and Last Name", "Email Address", "Timestamp"]]);      
      mySheet.getRange(2, 1, 1, 3).setValues([[projectChair, projectChairEmail, now]]);
    }
      
  }
  var unwantedSheet = projectRosterSheet.getSheets()[i-1];
  projectRosterSheet.setActiveSheet(unwantedSheet);
  projectRosterSheet.deleteActiveSheet();
  
  //So right here we created the spreadsheet and we are just going to pause for a moment to guarantee that it has been
  //recognized by google's servers. If we try to access it too soon, I am afraid google will think that it doesn't exist (yet).
  
  //Note that we have already created the spreadsheet file, but in order to place it into its specific folder on the drive, 
  //We actually have to find a handle to it on the drive and copy it to that target folder.
  
  var fileIterator = DriveApp.getFilesByName(spreadsheetName);
  //Do a while loop because we don't know how long we have to wait until the file exists.
  while (!fileIterator.hasNext()){
   Utilities.sleep(500);
   fileIterator = DriveApp.getFilesByName(spreadsheetName); 
  }
  var file = fileIterator.next();
  var targetFolder = DriveApp.getFoldersByName("Current Projects Signup Rosters").next(); //We aren't waiting for it to be created. It will already exist.
  
  var newSheet = file.makeCopy(targetFolder);
  
  file.setTrashed(true);
  
  newSheet.setName(spreadsheetName);
  newSheet.addViewer(projectChairEmail);
  
  return projectRosterSheet;
}

function getRosterSpreadSheetFile(sheetName){
  //Sheetname includes not only the event name, but also the date, as shown in all of the event roster spreadsheets.
  
  var potentialFiles = DriveApp.getFilesByName(sheetName);
  var myFile;
  var mySpreadsheet;
  var mySheets;
  
  //If there is no spreadsheet with that name found:
  if (!(potentialFiles.hasNext())){
     Logger.log("ERROR: Problem retrieving spreadsheet for " + sheetName);
     return null;
  }
  else {
    myFile = potentialFiles.next();
    if (potentialFiles.hasNext()){
      Logger.log("ERROR: Multiple Instances of spreadsheet: " + sheetName + " have been found. returning the first instance found");
    }
    return myFile;
  }
  
  return null;
  
}

//This function was adapted from the google script service here: https://developers.google.com/apps-script/advanced/url-shortener
function getShortUrl(inputUrl) {
  var shortUrl = UrlShortener.Url.insert({
    longUrl: inputUrl
  });
  return shortUrl.id;
}
